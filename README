#cmake study note
## project(<PROJECT-NAME> [<language-name>...])
1.设置工程名，并把设置的名存储到PROJECT_NAME变量中。
2.可选的设置使用的语言，默认支持所有语言。
3.隐性设置<PROJECT-NAME>_BINARY_DIR和<PROJECT-NAME>_SOURCE_DIR两个变量。
4.cmake 还提供PROJECT_BINARY_DIR和PROJECT_SOURCE_DIR分别和上面的两个变量
对应，建议一致使用PROJECT开头的变量，这样就算修改了工程名也不用修改其他。

## set(<variable> <value>... [PARENT_SCOPE])
1.定义一个普通变量

## message([<mode>] "message to display" ...)
1.向用户输出信息
2.mode有:
        STATUS:附带信息
        WARNING:警告信息，将继续处理
        SEND_ERROR:错误信息，继续处理，但停止产生
        FATAL_ERROR:错误信息，停止处理和产生

## add_executable(<name> [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [source1] [source2 ...])
1.用提供的source file 产生名字为name的可执行文件
2.这里的名字和工程名没有关系，可以设置为其他名。
3.这里提供的文件名可以用变量定义，使用的时候如${SRC_LIST}，当然这变量要提前定义

## add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])
1.指定源文件目录，和产生二进制和中间文件的目录
2.二进制文件目录是在构建目录下产生的。
3.无论是否指出编译输出目录都可以使用set来重新定义EXECUTABLE_OUTPUT_PATH
用来指定最终目标二进制的位置。

## INSTALL 命令
### install(<FILES> files... DESTINATION <dir>
        [PERMISSIONS permissions...]
        [CONFIGURATIONS [Debug|Release|...]]
        [COMPONENT <component>]
        [RENAME <name>] [OPTIONAL] [EXCLUDE_FROM_ALL])
1.可用于安装一般文件
2.可以指定访问权限,不指定权限则默认为644权限。
3.文件名是指令所在路径下的文件。


### install(<PROGRAMS> files... DESTINATION <dir>
        [PERMISSIONS permissions...]
        [CONFIGURATIONS [Debug|Release|...]]
        [COMPONENT <component>]
        [RENAME <name>] [OPTIONAL] [EXCLUDE_FROM_ALL])
1.可用于安装非目标文件的一些可执行文件例如脚本
2.和上面的指令用法一样，但是安装后的权限是755

### install(DIRECTORY dirs... DESTINATION <dir>
        [FILE_PERMISSIONS permissions...]
        [DIRECTORY_PERMISSIONS permissions...]
        [USE_SOURCE_PERMISSIONS] [OPTIONAL] [MESSAGE_NEVER]
        [CONFIGURATIONS [Debug|Release|...]]
        [COMPONENT <component>] [EXCLUDE_FROM_ALL]
        [FILES_MATCHING]
        [[PATTERN <pattern> | REGEX <regex>]
         [EXCLUDE] [PERMISSIONS permissions...]] [...])
1.用于目录的安装
2.dir/和dir是有区别的，dir/是指把dir中所有的文件
安装到对应的目录，而dir就是把dir本身安装到指定目录
3.这里的dir是source_dir相对路径
4.所有的DESTINATION指定的dir都是以<prefix>提供的dir
的相对路径，默认是/usr/local/
5.<prefix>可以通过DCMAKE_INSTALL_PREFIX指定

### install(TARGETS targets... [EXPORT <export-name>]
        [[ARCHIVE|LIBRARY|RUNTIME|OBJECTS|FRAMEWORK|BUNDLE|
          PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE]
         [DESTINATION <dir>]
         [PERMISSIONS permissions...]
         [CONFIGURATIONS [Debug|Release|...]]
         [COMPONENT <component>]
         [NAMELINK_COMPONENT <component>]
         [OPTIONAL] [EXCLUDE_FROM_ALL]
         [NAMELINK_ONLY|NAMELINK_SKIP]
        ] [...]
        [INCLUDES DESTINATION [<dir> ...]]
        )
1.此命令用于安装目标文件，静态库，动态库等等
2.ARCHIVE 表示静态库，LIBRARY 表示动态库，RUNTIME 表示可执行目标文件
3.DESTINATION 表示安装的文件夹，不以/开头就认为是相对路径
以/开头就认为是绝对路径，这时候CMAKE_INSTALL_PREFIX就无用了。
4.例子: install(TARGETS hello libhello libhello_static 
                RUNTIME DESTINATION bin
                LIBRARY DESTINATION lib
                ARCHIVE DESTINATION lib_static)

## add_library(<name> [STATIC | SHARED | MODULE]
            [EXCLUDE_FROM_ALL]
            [source1] [source2 ...])
1.此命令用于生成静态库或动态库。
2.name没必要写全名字，如libhello.so，我们只需要写hello就可以了，
cmake 会根据具体的选项生成具体的名字。

## set_target_properties(target1 target2 ...
                      PROPERTIES prop1 value1
                      prop2 value2 ...)
1.此命令用于设置生成的目标文件的属性，可以控制其构建过程。
2.例如：
//用于设置生成的目标文件的输出名字
set_target_properties(hello_static PROPERTIES OUTPUT_NAME "hello")
//由于cmake在生成target时候会尝试清理其他使用该名字的库，所以若想
//同时生成相同名字的动态库和静态库，要为target设置属性如下
set_target_properties(hello PROPERTIES CLEAN_DIRECT_OUTPUT 1)
set_target_properties(hello_static PROPERTIES CLEAN_DIRECT_OUTPUT 1)
//设置动态库的版本号，动态库一般都有版本号，版本号是为了让多个版本
//共存于同一机器，并且使用链接方式使用不同的版本
set_target_properties(hello PROPERTIES VERSION 1.2 SOVERSION 1)
VERSION 代表动态库版本，而SOVERSION 代表API版本。
这个例子将在生成lib的文件夹中生成
libhello.so.1.2
libhello.so.1--->libhello.so.1.2
libhello.so--->libhello.so.1

## get_target_property(VAR target property)
1.这个命令用来获得target的属性信息，然后存储到VAR里面
2.执行过之后就可以${VAR}来获得属性的信息了，没有就会返回 NOTFOUND

## cmake 常用变量
### CMAKE_BINARY_DIR PROJECT_BINARY_DIR <project-name>_BINARY_DIR
### CMAKE_SOURCE_DIR PROJECT_SOURCE_DIR <project-name>_SOURCE_DIR
### CMAKE_CURRENT_SOURCE_DIR 
### CMAKE_CURRENT_BINARY_DIR 
### CMAKE_CURRENT_LIST_FILE 
### CMAKE_CURRENT_LIST_LILE 
### CMAKE_MODULE_PATH 
### EXECUTABLE_OUTPUT_PATH LIBRARY_OUTPUT_PATH 
### PROJECT_NAME

## 内部构建和外部构建
内部构建：构建文件夹和代码文件夹是同一个，比较乱
外部构建：构建文件夹和代码文件夹不是同一个，不会改变代码树，比较清晰，容易管理。
